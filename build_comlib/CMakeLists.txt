CMAKE_MINIMUM_REQUIRED(VERSION 2.8)  # 设定版本
PROJECT(BUILD_LIB) # 设定工程名
SET(CMAKE_CXX_COMPILER "g++")  # 设定编译器

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Debug")
else()
  set(BUILD_TYPE "Release")
endif()

if(NOT CMAKE_BUILD_VERSION)
  set(LIB_VERSION "V1.1.0")
else()
  set(LIB_VERSION ${CMAKE_BUILD_VERSION})
endif()

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -g -fpermissive")

MESSAGE (STATUS "BUILD_LIB_BINARY_DIR:" ${BUILD_LIB_BINARY_DIR})
MESSAGE (STATUS "BUILD_LIB_SOURCE_DIR:" ${BUILD_LIB_SOURCE_DIR})
MESSAGE (STATUS "CMAKE_BUILD_TYPE:" ${CMAKE_BUILD_TYPE})
MESSAGE (STATUS "CMAKE_BUILD_VERSION:" ${CMAKE_BUILD_VERSION})

#设置是否生成共享库
SET(BUILD_SHARED_LIBS ON)

# 设定可执行二进制文件和库目录,为各个examples文件设置输出路径
#EXECUTABLE_OUTPUT_PATH为生成可执行文件路径，LIBRARY_OUTPUT_PATH为生成库文件路径。

SET(BUILD_LIB_DIR ${PROJECT_SOURCE_DIR}/../output/lib/comlib)
SET(LIBRARY_OUTPUT_PATH ${BUILD_LIB_DIR})

# 设置各类应用库的头文件
SET(3PART_INCLUDE  ${PROJECT_SOURCE_DIR}/../output/include/3partlib)

SET(JSONCPP_INCLUDE   ${3PART_INCLUDE}/jsoncpp/include)
SET(YAMLCPP_INCLUDE   ${3PART_INCLUDE}/yamlcpp/include)
SET(LOG4CPP_INCLUDE   ${3PART_INCLUDE}/log4cpp/include)
SET(TINYXML_INCLUDE   ${3PART_INCLUDE}/tinyxml/include)
SET(REDIS_INCLUDE     ${3PART_INCLUDE}/hiredis/include)

SET(COMM_INCLUDE  ${PROJECT_SOURCE_DIR}/../output/include/comlib)

SET(STIBEL_COMMON_INCLUDE  ${COMM_INCLUDE}/StiBel/Common/include)

#设置StiBel封装库名
SET(LIB_STIBEL_COMMON   StiBel_common_${LIB_VERSION})
SET(LIB_STIBEL_MYSQL    StiBel_mysql_${LIB_VERSION})
SET(LIB_STIBEL_REDIS    StiBel_redis_${LIB_VERSION})
SET(LIB_STIBEL_LOG      StiBel_log_${LIB_VERSION})
SET(LIB_STIBEL_JSON     StiBel_json_${LIB_VERSION})

SUBDIRS(
		./StiBel
	)


